/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package hu.bme.mit.theta.cloud.rest.endpoint.generated.contollers;

import hu.bme.mit.theta.cloud.rest.endpoint.generated.model.*;
import org.springframework.core.io.Resource;
import java.util.UUID;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.mail.MessagingException;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Produces;
import java.util.List;
import java.util.Optional;

public interface ModelApi {

    Logger log = LoggerFactory.getLogger(ModelApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "", description = "Fetches the model file", tags={ "model" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Successfully fetched the model", content = @Content(schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "404", description = "Model with the given id not found"),
        
        @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/model/{modelId}",
        produces = MediaType.APPLICATION_OCTET_STREAM_VALUE ,
        method = RequestMethod.GET)
    ResponseEntity<Resource> getModelFile(@Parameter(in = ParameterIn.PATH, description = "The model id", required=true, schema=@Schema()) @PathVariable("modelId") UUID modelId);


    @Operation(summary = "", description = "Fetches the model metadata", tags={ "model" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully fetched the data", content = @Content(schema = @Schema(implementation = GetModelMetadataResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Model with the given id not found"),
        
        @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/model/{modelId}/meta",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetModelMetadataResponse> getModelMetadata(@Parameter(in = ParameterIn.PATH, description = "The model id", required=true, schema=@Schema()) @PathVariable("modelId") UUID modelId);


    @Operation(summary = "", description = "Get metrics of the model without running the algorithm", tags={ "model" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Metrics of the model", content = @Content(schema = @Schema(implementation = GetModelMetricsResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Model with the given id not found"),
        
        @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/model/{modelId}/metrics",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetModelMetricsResponse> getModelMetrics(@Parameter(in = ParameterIn.PATH, description = "The model id", required=true, schema=@Schema()) @PathVariable("modelId") UUID modelId);


    @Operation(summary = "Upload model file", description = "", tags={ "model" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "model uploaded successfully", content = @Content(schema = @Schema(implementation = CreateModelResponse.class))),
        
        @ApiResponse(responseCode = "400", description = "Bad file format") })
    @RequestMapping(value = "/model",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<CreateModelResponse> uploadModel(@RequestParam(value = "model") MultipartFile model);


    @Operation(summary = "", description = "Visualize model without running the algorithm", tags={ "model" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Model successfully vizualized", content = @Content(schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "404", description = "Model with the given id not found"),
        
        @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/model/{modelId}/visualize",
        produces = { "image/png" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> visualizeModel(@Parameter(in = ParameterIn.PATH, description = "The model id", required=true, schema=@Schema()) @PathVariable("modelId") UUID modelId);

    @Operation(summary = "", description = "Starts cfa analysis process on the model with the given parameters", tags={ "job" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Analysis started successfully", content = @Content(array = @ArraySchema(schema = @Schema(implementation = StartProcessResponse.class)))),

            @ApiResponse(responseCode = "404", description = "Model with the given id not found"),

            @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/model/cfa/{modelId}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<List<StartProcessResponse>> startCfaAnalysis(@Parameter(in = ParameterIn.PATH, description = "The model id", required=true, schema=@Schema()) @PathVariable("modelId") UUID modelId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema())  @RequestBody StartCfaProcessRequest body);


    @Operation(summary = "", description = "Starts sts analysis process on the model with the given parameters", tags={ "job" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Analysis started successfully", content = @Content(array = @ArraySchema(schema = @Schema(implementation = StartProcessResponse.class)))),

            @ApiResponse(responseCode = "404", description = "Model with the given id not found"),

            @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/model/sts/{modelId}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<List<StartProcessResponse>> startStsAnalysis(@Parameter(in = ParameterIn.PATH, description = "The model id", required=true, schema=@Schema()) @PathVariable("modelId") UUID modelId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema())  @RequestBody StartStsProcessRequest body);


    @Operation(summary = "", description = "Starts xsts analysis process on the model with the given parameters", tags={ "job" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Analysis started successfully", content = @Content(array = @ArraySchema(schema = @Schema(implementation = StartProcessResponse.class)))),

            @ApiResponse(responseCode = "404", description = "Model with the given id not found"),

            @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/model/xsts/{modelId}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<List<StartProcessResponse>> startXstsAnalysis(@Parameter(in = ParameterIn.PATH, description = "The model id", required=true, schema=@Schema()) @PathVariable("modelId") UUID modelId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema())  @RequestBody StartXstsProcessRequest body);


    @Operation(summary = "", description = "Starts xta analysis process on the model with the given parameters", tags={ "job" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Analysis started successfully", content = @Content(array = @ArraySchema(schema = @Schema(implementation = StartProcessResponse.class)))),

            @ApiResponse(responseCode = "404", description = "Model with the given id not found"),

            @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/model/xta/{modelId}",
            produces = { "application/json" },
            consumes = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<List<StartProcessResponse>> startXtaAnalysis(@Parameter(in = ParameterIn.PATH, description = "The model id", required=true, schema=@Schema()) @PathVariable("modelId") UUID modelId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema())  @RequestBody StartXtaProcessRequest body);
}

