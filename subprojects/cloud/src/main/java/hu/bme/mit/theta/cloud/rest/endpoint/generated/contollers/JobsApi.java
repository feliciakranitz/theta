/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.23).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package hu.bme.mit.theta.cloud.rest.endpoint.generated.contollers;

import java.util.ArrayList;
import java.util.UUID;
import com.fasterxml.jackson.databind.ObjectMapper;
import hu.bme.mit.theta.cloud.rest.endpoint.generated.model.AllJobsResponse;
import hu.bme.mit.theta.cloud.rest.endpoint.generated.model.JobResponse;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import java.util.Optional;

public interface JobsApi {

    Logger log = LoggerFactory.getLogger(JobsApi.class);

    Optional<ObjectMapper> getObjectMapper();

    Optional<HttpServletRequest> getRequest();

    

    @Operation(summary = "", description = "Get all jobs", tags={ "job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Get all jobs", content = @Content(schema = @Schema(implementation = AllJobsResponse.class))) })
    @RequestMapping(value = "/jobs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ArrayList<JobResponse>> getAllJobs();


    @Operation(summary = "", description = "Get the result of the analysis with the given Id", tags={ "job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "102", description = "Analysis process not finished yet"),
        
        @ApiResponse(responseCode = "200", description = "Analysis finished", content = @Content(schema = @Schema(implementation = JobResponse.class))),
        
        @ApiResponse(responseCode = "404", description = "Process with the given id not found"),
        
        @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/jobs/{jobId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<JobResponse> getAnalysisResult(@Parameter(in = ParameterIn.PATH, description = "The analysis job id", required=true, schema=@Schema()) @PathVariable("jobId") UUID jobId);


    @Operation(summary = "", description = "Get the counterexample of the analysis with the given Id", tags={ "job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Cex file of the analysis", content = @Content(schema = @Schema(implementation = byte[].class))),
        
        @ApiResponse(responseCode = "404", description = "Job with the given id not found"),
        
        @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/jobs/{jobId}/cex",
        produces = MediaType.APPLICATION_OCTET_STREAM_VALUE ,
        method = RequestMethod.GET)
    ResponseEntity<Resource> getCexFile(@Parameter(in = ParameterIn.PATH, description = "The analysis job id", required=true, schema=@Schema()) @PathVariable("jobId") UUID jobId);


    @Operation(summary = "", description = "Get the log file of the analysis with the given Id", tags={ "job" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Log file of the analysis", content = @Content(schema = @Schema(implementation = byte[].class))),
        
        @ApiResponse(responseCode = "404", description = "Job with the given id not found"),
        
        @ApiResponse(responseCode = "500", description = "The error response if something goes wrong.") })
    @RequestMapping(value = "/jobs/{jobId}/log",
        produces = MediaType.APPLICATION_OCTET_STREAM_VALUE ,
        method = RequestMethod.GET)
    ResponseEntity<Resource> getLogFile(@Parameter(in = ParameterIn.PATH, description = "The analysis job id", required=true, schema=@Schema()) @PathVariable("jobId") UUID jobId);

}

